def software_repo = "192.168.69.130:20202"
def repo_namespace = "demo-project01"
def app_name = "oder"
def label = "oder-${env.BUILD_NUMBER}"

podTemplate(label: label, cloud: "fusionstage", containers: [
  containerTemplate(name: 'jnlp', image: "$software_repo/cpe/cpe-jnlp-slave:1.0.0", args: '${computer.jnlpmac} ${computer.name}'),
    containerTemplate(name: 'docker', image: "$software_repo/cpe/cpe-docker:1.0.0", ttyEnabled: true, command: 'cat'),
    containerTemplate(name: 'maven', image: "$software_repo/cpe/cpe-maven:1.0.0", ttyEnabled: true, command: 'cat'),
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
    hostPathVolume(mountPath: '/opt/maven-repo', hostPath: '/opt/maven-repo')
  ],
  yaml: """
    spec:
      securityContext:
        runAsUser: 0
      nodeSelector:
        tool.jenkins: jenkins-slave
  """) {

  node(label) {
    stage('CodeCheckout'){
      checkout([$class: 'GitSCM',
          branches: [[name: "master"]],
          doGenerateSubmoduleConfigurations: false,
          submoduleCfg: [],
          userRemoteConfigs: [[credentialsId: 'gitlab', url: 'http://192.170.190.37:31945/paaspoc/vmall-cse-linlaipeng']]])
    }
        stage('Build-CodeAnalysis') {
      container('maven') {
        dir(env.WORKSPACE){
          withSonarQubeEnv('sonarqube') {
              sh "mvn clean install -s build/settings.xml -f record-vmall/pom.xml"
          }
        }
      }
    }

    stage('Upload') {
        container('docker') {
        dir(env.WORKSPACE){

            sh "mkdir -p tmp"
            sh "cp -r ${env.WORKSPACE}/record-vmall/* tmp/"
            sh "docker build -t $software_repo/$repo_namespace/$app_name:v2.${env.BUILD_NUMBER} tmp/"
            sh "docker login -u 810a2400533545e6bf3fa2a07b3e370b@GIF65ELSH9POGCBWWPG0 -p 8e94b891089a2ae986151271b820b8057ab76baa56accf4dad82faa1d4ec7110 192.168.69.130:20202"
//          sh "docker push $software_repo/$repo_namespace/nfv-nettopov:${env.BUILD_NUMBER}"
//          print "[CPE_OUTPUT]$software_repo/$repo_namespace/nfv-nettopov:${env.BUILD_NUMBER} [CPE_OUTPUT_END]"
            sh "docker save $software_repo/$repo_namespace/${app_name}:v2.${env.BUILD_NUMBER} > tmp/${app_name}-v2.${env.BUILD_NUMBER}.tar"
            uploadImage(imageAddr: "${env.WORKSPACE}/tmp/${app_name}-v2.${env.BUILD_NUMBER}.tar", loginType: 'CURRENT', namespace: "${repo_namespace}")
        }
      }
    }
  }
}

